{"version":3,"sources":["components/sidebar.jsx","services/booksList.js","components/bookListing.jsx","components/bookTable.jsx","components/mainContent.jsx","components/topbar.jsx","components/home.jsx","App.js","serviceWorker.js","index.js"],"names":["SideBar","state","Nav","className","activeKey","onSelect","selectedKey","alert","Item","Link","href","eventKey","disabled","Component","booksList","BookListing","book","tableStyle","console","log","this","props","setState","key","id","style","title","author","year","series","rating","BookTable","booklisting","notification","footer","colNames","bootstrapTableHeader","map","col","bootstrapTableBody","Table","striped","bordered","hover","size","bootstrapTable","prepareTable","MainContent","TopBar","class","type","placeholder","aria-label","Home","Container","fluid","Row","Col","xs","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fb985bae.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Nav} from 'react-bootstrap';\n\nclass SideBar extends Component {\n    state = {  }\n    render() { \n        return (  \n            <Nav className=\"col-md-12 d-none d-md-block bg-light sidebar\" activeKey=\"/home\" onSelect={selectedKey => alert(`selected ${selectedKey}`)}>\n                <div className=\"sidebar-sticky\">              \n                    <Nav.Item>\n                        <Nav.Link href=\"/home\">Books</Nav.Link>\n                    </Nav.Item>\n                    <Nav.Item>\n                        <Nav.Link eventKey=\"link-1\">Manga</Nav.Link>\n                    </Nav.Item>\n                    <Nav.Item>\n                        <Nav.Link eventKey=\"link-2\">Documents</Nav.Link>\n                    </Nav.Item>\n                    <Nav.Item>\n                        <Nav.Link eventKey=\"disabled\" disabled>\n                            Settings\n                        </Nav.Link>\n                    </Nav.Item>\n                </div>\n            </Nav>\n            );\n    }\n}\n \nexport default SideBar;","export const booksList = [\n    {\n        \"id\": 'item1',\n        \"rating\": 10,\n        \"title\": \"Angles and Deamons\",\n        \"author\": \"Dan Brown\",\n        \"year\": 2000,\n        \"series\" : \"Robert Langdon\"\n    },\n    {\n        \"id\": 'item2',\n        \"rating\": 5,\n        \"title\": \"The Da Vinci Code\",\n        \"author\": \"Dan Brown\",\n        \"year\": 2003,\n        \"series\" : \"Robert Langdon\"\n    },\n    {\n\n        \"id\": 'item3',\n        \"rating\": 3,\n        \"title\": \"The Lost Symbol\",\n        \"author\": \"Dan Brown\",\n        \"year\": 2009,\n        \"series\" : \"Robert Langdon\"\n    },\n    {\n        \"id\": 'item4',\n        \"rating\": 7,\n        \"title\": \"Inferno\",\n        \"author\": \"Dan Brown\",\n        \"year\": 2013,\n        \"series\" : \"Robert Langdon\"\n    },\n    {\n        \"id\": 'item5',\n        \"rating\": 10,\n        \"title\": \"Origin\",\n        \"author\": \"Dan Brown\",\n        \"year\": 2017,\n        \"series\" : \"Robert Langdon\"\n    },\n    {\n        \"id\": 'item6',\n        \"rating\": 8,\n        \"title\": \"The Alchemist\",\n        \"author\": \"Paulo Coelho\",\n        \"year\": 1988,\n        \"genre\": \"D\",\n        \"series\": \"\"\n    },\n    {\n        \"id\": 'item7',\n        \"rating\": 9,\n        \"title\": \"The Secret\",\n        \"author\": \"Rhonda Bryne\",\n        \"year\": 2006,\n        \"genre\": \"SH\",\n        \"series\": \"\"\n    }\n] ","import React, { Component } from 'react';\n\nclass BookListing extends Component {\n    state = { book:{}, tableStyle:{} }\n    componentDidMount(){\n        console.log(\"BookListing: componentDidMount : props here are -->\", this.props);\n        const book = this.props.book;\n        const tableStyle = this.props.tableStyle;\n        this.setState({ \"book\": book, tableStyle:tableStyle})\n    }\n\n    render() {\n        const book= this.state.book;\n        const tableStyle = this.state.tableStyle;\n        return (<tr key={book.id} style={tableStyle}>\n                <td style={tableStyle}>{book.title}</td>\n                <td style={tableStyle}>{book.author}</td> \n                <td style={tableStyle}>{book.year}</td> \n                <td style={tableStyle}>{book.series}</td>\n                <td style={tableStyle}>{book.rating}</td>\n            </tr>\n            );\n    }\n} \nexport default BookListing;","import React, { Component } from 'react';\n// named import {} & the default import \nimport { booksList } from '../services/booksList';\nimport BookListing from './bookListing';\n\n//import Navbar from 'react-bootstrap/Navbar';\nimport {Navbar, Nav, NavDropdown,FormControl,Form,Table, Button} from 'react-bootstrap';\n \nclass BookTable extends Component {\n    state = { booklisting: [], notification: 0, footer:0 }\n \n    componentDidMount(){\n        console.log(\"Component did mount\")\n        this.setState( { booklisting: booksList } )\n        //this.state = { booklisting: bookListing }\n    }\n\n    prepareTable(){\n        const tableStyle = { \"border\": \"1px solid black\" ,\"padding\": \"10px\"}\n        const colNames = [\"Book Title\", \"Author\", \"Year\", \"Series\", \"Rating\"];\n        const tableHeader = <tr style={tableStyle}>{colNames.map((col) => <th>{col}</th>)} </tr>;\n        const bootstrapTableHeader = <thead> <tr>{colNames.map((col) => <th>{col}</th>)} </tr> </thead>;\n        const bootstrapTableBody = <tbody> {this.state.booklisting.map((book) => <BookListing book={book} tableStyle={tableStyle}/>)}</tbody>;\n        const bootstrapTable  = <Table striped bordered hover size=\"lg\"> {bootstrapTableHeader} {bootstrapTableBody}</Table>\n        return bootstrapTable;\n    }\n\n    render() {\n        const bootstrapTable = this.prepareTable()\n        return ( <div className=\"bookTable\"> {bootstrapTable}</div>);\n    }\n}\n \nexport default BookTable;","import React, { Component } from 'react';\nimport BookTable from './bookTable';\n\nclass MainContent extends Component {\n    state = {  }\n    render() { \n        return ( <div> <BookTable /> </div>);\n    }\n}\n\nexport default MainContent;","import React, { Component } from 'react';\nimport {nav, button} from 'react-bootstrap';\nclass TopBar extends Component {\n    state = {  }\n    render() { \n        return (        \n            \n            <nav class=\"navbar navbar-dark bg-dark\">\n                <a class=\"navbar-brand\" href=\"#\">BookShelf</a>\n                <div className='container'>\n                <form class=\"form-inline my-2 my-lg-0\">\n                    <input class=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search           \" aria-label=\"Search\" />\n                    <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\n                </form>\n                </div>\n                                \n            </nav>\n                    );\n    }\n}\n \nexport default TopBar;","import React, { Component } from 'react';\nimport SideBar from './sidebar';\nimport MainContent from './mainContent';\nimport TopBar from './topbar';\nimport {Row, Col, Container} from 'react-bootstrap';\n\nclass Home extends Component {\n    state = {  }\n    render() { \n        return (\n        <div className=\"Home\">\n          <Container fluid>\n            <Row>\n              <Col><TopBar /></Col>\n            </Row>\n            <Row>\n              <Col xs={2}><SideBar /></Col>\n              <Col xs={10}><MainContent /></Col>\n            </Row>\n          </Container>\n          <footer className='footer'>\n            <div className='container'>\n              <span className=\"text-muted\">BookShelf 2020</span>\n            </div>\n          </footer>\n        </div>\n          );\n\n    }\n}\n \nexport default Home;","import React, { Component } from 'react';\nimport {BrowserRouter} from 'react-router-dom';\nimport Home from './components/home'\n\nclass App extends Component {\n    state = {  }\n    render() {        \n        return (\n            <BrowserRouter>\n                <Home />\n            </BrowserRouter> );\n    }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}